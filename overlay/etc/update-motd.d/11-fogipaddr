#!/bin/bash
# Teste si le certificat actuellement utilisé par FOG 
#  est cohérent avec l'adresse IP actuelle.
# Affiche un message en conséquence (uniquement pour l'utilisateur root).
#
#  --- This script includes components from the FOG Project ---
#  FOG - Free, Open-Source Ghost is a computer imaging solution.
#  Copyright (C) 2007  Chuck Syperski & Jian Zhang
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#    any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# * @package  FOGProject
# * @author   Tom Elliott <tommygunsster@gmail.com>
# * @license  http://opensource.org/licenses/gpl-3.0 GPLv3
# * @link     https://fogproject.org

getAllNetworkInterfaces() {
    gatewayif=$(ip -4 route show | grep "^default via" | awk '{print $5}')
    if [[ -z ${gatewayif} ]]; then
        interfaces="$(ip -4 link | grep -v LOOPBACK | grep UP | awk -F': |@' '{print $2}' | tr '\n' ' ')"
    else
        interfaces="$gatewayif $(ip -4 link | grep -v LOOPBACK | grep UP | awk -F': |@' '{print $2}' | tr '\n' ' ' | sed "s/${gatewayif}//g")"
    fi
    echo -n $interfaces
}

getCidr() {
    local cidr
    cidr=$(ip -f inet -o addr | grep $1 | awk -F'[ /]+' '/global/ {print $5}' | head -n2 | tail -n1)
    echo $cidr
}

cidr2mask() {
    local i=""
    local mask=""
    local full_octets=$(($1/8))
    local partial_octet=$(($1%8))
    for ((i=0;i<4;i+=1)); do
        if [[ $i -lt $full_octets ]]; then
            mask+=255
        elif [[ $i -eq $full_octets ]]; then
            mask+=$((256 - 2**(8-$partial_octet)))
        else
            mask+=0
        fi
        test $i -lt 3 && mask+=.
    done
    echo $mask
}
if [ -z "$TERM" ]; then
    _term=linux
else
    _term=$TERM
fi

bold=$(tput -T $_term bold)
normal=$(tput -T $_term sgr0)

if [ "$EUID" -eq 0 ]
	_SRVPUBLIC=$(find /var -iregex '.*srvpublic.crt' | head -n 1 | xargs realpath)
	if [ -r "$_SRVPUBLIC" ]; then
		openssl version >> /dev/null 2>&1
		if [ "$?" -ne 0 ]; then
			echo "openssl not found / generic error"
			exit 1
		fi
		if [[ -z "$strSuggestedInterface" ]]; then
			echo "ERROR : No suggested interface found"
			exit 1
		fi
		if [[ -z "$ipaddress" ]]; then
			echo "ERROR : No IP address for suggested interface ($strSuggestedInterface)"
			exit 1
		fi
		if [[ -z "$submask" ]]; then
			echo "ERROR : No submask found"
			exit 1
		fi
		_CN=$(openssl x509 -noout -subject -in "$_SRVPUBLIC")
		
		# Remove space in the string
		_CN=$(echo "$_CN" | sed 's/ //g')
		_LeCN=$(echo "$_CN" | cut -f3 -d"=")
		
		if [ "$ipaddress" != "$_LeCN" ]; then
			echo
			echo "    ${bold}***** Warning *****${normal}"
			echo
			echo "$(tput setaf 0; tput setab 3)FOG Certificate ERROR$(tput sgr0) ; $_LeCN (cert.) dosent match IP address $ipaddress ($strSuggestedInterface)"
			echo "$(tput setaf 7)You must generate a valid certificate with commands $(tput setaf 5)regencert-fogserver$(tput setaf 7) and $(tput setaf 5)recompileipxe-fogserver$(tput sgr0)"
			echo "$(tput setaf 7)Unless executed, FOG, iPXE and FOG Client will not work properly.$(tput sgr0)"
		fi
	else
		echo "ERR : Unable to locate srvpublic.crt"
	fi
fi

echo
echo "    ${bold}changeip-fogserver${normal} - Change the IP address inside FOG Server configuration"
echo "    ${bold}regencert-fogserver${normal} - Regen web certificates (used by FOG Client)"
echo "    ${bold}regensecret-fogserver${normal} - Regen all passwords used by FOG Server (FTP, web,...)"
echo "    ${bold}recompileipxe-fogserver${normal} - Recompile iPXE with FOG certificates"
echo ""

